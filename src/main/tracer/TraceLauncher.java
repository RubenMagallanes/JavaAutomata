package main.tracer;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.jar.Attributes.Name;
import main.Main;
import main.load.JarData;
import main.load.JarLoader;

public class TraceLauncher {

	//the path to the jar to be executed
	private String jarPath;
	
	private static DynamicHandler dynamicHandler;
	
	public void setDynamicHandler(DynamicHandler dh){
		this.dynamicHandler = dh;
	}

	//the arguments to execute the traced program with
	private String commanLineArgumnets;

	/**
	 * Sets the command line arguments for the program to be executed
	 * with
	 *
	 * @param arguments for program
	 * */
	public void setCommanLineArguments(String arguments){
		this.commanLineArgumnets = arguments;
	}


	/**
	 * Constructs the TraceLauncher object with the pathname of the jar
	 *
	 * @param path of the jar to execute
	 * */
	public TraceLauncher(String JarPathName){
		this.jarPath = JarPathName;
		//this.executions = new ArrayList<ExecutionData>(Arrays.asList(new ExecutionData()));
	}


	/**
	 * Runs the jar file and generates and returns the traces specified by the jarPath
	 *
	 * @return The traces generated by the jar
	 * */
	public Trace run(){
		if(jarPath == null)return null;

		//The file of the jar to trace
		File file = new File(jarPath);

		//loads in the jar file
		JarData jd = JarLoader.loadJarFile(file);


		//the path of the jar file
		jarPath = jd.getFile().getAbsolutePath();


		//grabs the main class of the jar file
		final String mainClass = jd.getManifest().getMainAttributes().getValue(Name.MAIN_CLASS);

		//grabs the classes from the jar file
		final Set<String> loadedClasses = new HashSet<String>();
		for (Class<?> cl : jd.getClasses()){
			loadedClasses.add(cl.getName());
		}

		TestThread thread = new TestThread(loadedClasses, commanLineArgumnets, mainClass);

		//set thread options and start
		thread.setName("MainWindow tracer thread");
		thread.setDaemon(true);
		thread.start();

		//returns the generated traces
		return thread.getTraces();
	}


	private class TestThread extends Thread{

		//loaded classes of the program
		private Set<String> loadedClasses;

		//private ExecutionData[] executionsArray;
		private String mainClass;

		//the arguments to run the program with
		private String commanLineArgumnets;

		//the trace of the program
		private Trace trace;

		public TestThread(Set<String> loadedClasses, String commandLineArguments, String mainClass){
			this.loadedClasses = loadedClasses;
			this.commanLineArgumnets = commandLineArguments;
			this.mainClass = mainClass;
		}

		@Override
		public void start(){
			run();
		}

		@Override
		public void run() {
			//Creates a filter that filters class names from the jar
			TraceFilter initialFilter = new TraceFilter() {
				@Override
				public boolean isMethodTraced(MethodKey m) {
					return loadedClasses.contains(m.getClassName());
				}

				@Override
				public boolean isFieldTraced(FieldKey f) {
					return loadedClasses.contains(f.getClassName());
				}

				@Override
				public boolean isParameterTraced(ParameterKey p) {
					return true;
				}
			};

			if(Main.getFilter() != null){
				initialFilter = Main.getFilter();
			}

				FutureTraceConsumer future = new FutureTraceConsumer();
				try {
					Tracer.launchAndTraceAsync("-cp \"" + jarPath + "\"",
							mainClass + " " + commanLineArgumnets,
							initialFilter, future);
				} catch (Exception e) {
					e.printStackTrace();
				}

				try {
					trace = future.get();
				} catch (InterruptedException | ExecutionException e) {
					e.printStackTrace();
				}
		}


		/**
		 * Returns the trace from the executed program
		 *
		 * @return The generated trace
		 * */
		public Trace getTraces(){
			return this.trace;
		}
	}
}
